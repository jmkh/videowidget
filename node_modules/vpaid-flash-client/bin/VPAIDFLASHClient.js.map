{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/VPAIDFLASHClient.js","js/jsFlashBridge.js","js/jsFlashBridgeRegistry.js","js/registry.js","js/utils.js","node_modules/swfobject/index.js"],"names":[],"mappings":"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","file":"VPAIDFLASHClient.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nconst swfobject = require('swfobject');\nconst JSFlashBridge = require('./jsFlashBridge').JSFlashBridge;\n//const VPAIDAdUnit = require('./VPAIDAdUnit').VPAIDAdUnit;\nclass VPAIDFLASHClient {\n}\n\n\n/*\n\n\nconst noop = require('./utils').noop;\nconst callbackTimeout = require('./utils').callbackTimeout;\nconst isPositiveInt = require('./utils').isPositiveInt;\nconst createElementWithID = require('./utils').createElementWithID;\nconst uniqueVPAID = require('./utils').unique('vpaid');\nconst createFlashTester = require('./flashTester.js').createFlashTester;\n\nconst ERROR = 'error';\nconst FLASH_VERSION = '10.1.0';\n\nlet flashTester = {isSupported: ()=> true}; // if the runFlashTest is not run the flashTester will always return true\n\nclass VPAIDFLASHClient {\n    constructor (vpaidParentEl, callback, swfConfig = {data: 'VPAIDFlash.swf', width: 800, height: 400}, params = { wmode: 'transparent', salign: 'tl', align: 'left', allowScriptAccess: 'always', scale: 'noScale', allowFullScreen: 'true', quality: 'high'}, vpaidOptions = { debug: false, timeout: 10000 }) {\n\n        var me = this;\n\n        this._vpaidParentEl = vpaidParentEl;\n        this._flashID = uniqueVPAID();\n        this._destroyed = false;\n        callback = callback || noop;\n\n        swfConfig.width = isPositiveInt(swfConfig.width, 800);\n        swfConfig.height = isPositiveInt(swfConfig.height, 400);\n\n        createElementWithID(vpaidParentEl, this._flashID, true);\n\n        params.movie = swfConfig.data;\n        params.FlashVars = `flashid=${this._flashID}&handler=${JSFlashBridge.VPAID_FLASH_HANDLER}&debug=${vpaidOptions.debug}&salign=${params.salign}`;\n\n        if (!VPAIDFLASHClient.isSupported()) {\n            return onError('user don\\'t support flash or doesn\\'t have the minimum required version of flash ' + FLASH_VERSION);\n        }\n\n        this.el = swfobject.createSWF(swfConfig, params, this._flashID);\n\n        if (!this.el) {\n            return onError( 'swfobject failed to create object in element' );\n        }\n\n        var handler = callbackTimeout(vpaidOptions.timeout,\n            (err, data) => {\n                $loadPendedAdUnit.call(this);\n                callback(err, data);\n            }, () => {\n                callback('vpaid flash load timeout ' + vpaidOptions.timeout);\n            }\n        );\n\n        this._flash = new JSFlashBridge(this.el, swfConfig.data, this._flashID, swfConfig.width, swfConfig.height, handler);\n\n        function onError(error) {\n            setTimeout(() => {\n                callback(new Error(error));\n            }, 0);\n            return me;\n        }\n\n    }\n\n    destroy () {\n        this._destroyAdUnit();\n\n        if (this._flash) {\n            this._flash.destroy();\n            this._flash = null;\n        }\n        this.el = null;\n        this._destroyed = true;\n    }\n\n    isDestroyed () {\n        return this._destroyed;\n    }\n\n    _destroyAdUnit() {\n        delete this._loadLater;\n\n        if (this._adUnitLoad) {\n            this._adUnitLoad = null;\n            this._flash.removeCallback(this._adUnitLoad);\n        }\n\n        if (this._adUnit) {\n            this._adUnit._destroy();\n            this._adUnit = null;\n        }\n    }\n\n    loadAdUnit(adURL, callback) {\n        $throwIfDestroyed.call(this);\n\n        if (this._adUnit) {\n            this._destroyAdUnit();\n        }\n\n        if (this._flash.isReady()) {\n            this._adUnitLoad = (err, message) => {\n                if (!err) {\n                    this._adUnit = new VPAIDAdUnit(this._flash);\n                }\n                this._adUnitLoad = null;\n                callback(err, this._adUnit);\n            };\n\n            this._flash.callFlashMethod('loadAdUnit', [adURL], this._adUnitLoad);\n        }else {\n            this._loadLater = {url: adURL, callback};\n        }\n    }\n\n    unloadAdUnit(callback = undefined) {\n        $throwIfDestroyed.call(this);\n\n        this._destroyAdUnit();\n        this._flash.callFlashMethod('unloadAdUnit', [], callback);\n    }\n    getFlashID() {\n        $throwIfDestroyed.call(this);\n        return this._flash.getFlashID();\n    }\n    getFlashURL() {\n        $throwIfDestroyed.call(this);\n        return this._flash.getFlashURL();\n    }\n\t\n}\n\nsetStaticProperty('isSupported', () => {\n    return swfobject.hasFlashPlayerVersion(FLASH_VERSION) && flashTester.isSupported();\n}, true);\n\nsetStaticProperty('runFlashTest', (swfConfig) => {\n    flashTester = createFlashTester(document.body, swfConfig);\n});\n\nfunction $throwIfDestroyed() {\n    if(this._destroyed) {\n        throw new Error('VPAIDFlashToJS is destroyed!');\n    }\n}\n\nfunction $loadPendedAdUnit() {\n    if (this._loadLater) {\n        this.loadAdUnit(this._loadLater.url, this._loadLater.callback);\n        delete this._loadLater;\n    }\n}\n\nfunction setStaticProperty(propertyName, value, writable = false) {\n    Object.defineProperty(VPAIDFLASHClient, propertyName, {\n        writable: writable,\n        configurable: false,\n        value: value\n    });\n}\n\n\n*/\nVPAIDFLASHClient.swfobject = swfobject;\nmodule.exports =  VPAIDFLASHClient;\n","'use strict';\n\nlet unique = require('./utils').unique;\nlet isPositiveInt = require('./utils').isPositiveInt;\nlet stringEndsWith = require('./utils').stringEndsWith;\nlet SingleValueRegistry = require('./registry').SingleValueRegistry;\nlet MultipleValuesRegistry = require('./registry').MultipleValuesRegistry;\nconst registry = require('./jsFlashBridgeRegistry');\nconst VPAID_FLASH_HANDLER = 'vpaid_video_flash_handler';\nconst ERROR = 'AdError';\n\nclass JSFlashBridge {\n    constructor (el, flashURL, flashID, width, height, loadHandShake) {\n        this._el = el;\n        this._flashID = flashID;\n        this._flashURL = flashURL;\n        this._width = width;\n        this._height = height;\n        this._handlers = new MultipleValuesRegistry();\n        this._callbacks = new SingleValueRegistry();\n        this._uniqueMethodIdentifier = unique(this._flashID);\n        this._ready = false;\n        this._handShakeHandler = loadHandShake;\n\n        registry.addInstance(this._flashID, this);\n    }\n\n    on(eventName, callback) {\n        this._handlers.add(eventName, callback);\n    }\n\n    off(eventName, callback) {\n        return this._handlers.remove(eventName, callback);\n    }\n\n    offEvent(eventName) {\n        return this._handlers.removeByKey(eventName);\n    }\n\n    offAll() {\n        return this._handlers.removeAll();\n    }\n\n    callFlashMethod(methodName, args = [], callback = undefined) {\n        var callbackID = '';\n        // if no callback, some methods the return is void so they don't need callback\n        if (callback) {\n            callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;\n            this._callbacks.add(callbackID, callback);\n        }\n\n\n        try {\n            //methods are created by ExternalInterface.addCallback in as3 code, if for some reason it failed\n            //this code will throw an error\n            this._el[methodName]([callbackID].concat(args));\n\n        } catch (e) {\n            if (callback) {\n                $asyncCallback.call(this, callbackID, e);\n            } else {\n\n                //if there isn't any callback to return error use error event handler\n                this._trigger(ERROR, e);\n            }\n        }\n    }\n\n    removeCallback(callback) {\n        return this._callbacks.removeByValue(callback);\n    }\n\n    removeCallbackByMethodName(suffix) {\n        this._callbacks.filterKeys((key) => {\n            return stringEndsWith(key, suffix);\n        }).forEach((key) => {\n            this._callbacks.remove(key);\n        });\n    }\n\n    removeAllCallbacks() {\n        return this._callbacks.removeAll();\n    }\n\n    _trigger(eventName, event) {\n        this._handlers.get(eventName).forEach((callback) => {\n            //clickThru has to be sync, if not will be block by the popupblocker\n            if (eventName === 'AdClickThru') {\n                callback(event);\n            } else {\n                setTimeout(() => {\n                    if (this._handlers.get(eventName).length > 0) {\n                        callback(event);\n                    }\n                }, 0);\n            }\n        });\n    }\n\n    _callCallback(methodName, callbackID, err, result) {\n\n        let callback = this._callbacks.get(callbackID);\n\n        //not all methods callback's are mandatory\n        //but if there exist an error, fire the error event\n        if (!callback) {\n            if (err && callbackID === '') {\n                this.trigger(ERROR, err);\n            }\n            return;\n        }\n\n        $asyncCallback.call(this, callbackID, err, result);\n\n    }\n\n    _handShake(err, data) {\n        this._ready = true;\n        if (this._handShakeHandler) {\n            this._handShakeHandler(err, data);\n            delete this._handShakeHandler;\n        }\n    }\n\n    //methods like properties specific to this implementation of VPAID\n    getSize() {\n        return {width: this._width, height: this._height};\n    }\n    setSize(newWidth, newHeight) {\n        this._width = isPositiveInt(newWidth, this._width);\n        this._height = isPositiveInt(newHeight, this._height);\n        this._el.setAttribute('width', this._width);\n        this._el.setAttribute('height', this._height);\n    }\n    getWidth() {\n        return this._width;\n    }\n    setWidth(newWidth) {\n        this.setSize(newWidth, this._height);\n    }\n    getHeight() {\n        return this._height;\n    }\n    setHeight(newHeight) {\n        this.setSize(this._width, newHeight);\n    }\n    getFlashID() {\n        return this._flashID;\n    }\n    getFlashURL() {\n        return this._flashURL;\n    }\n    isReady() {\n        return this._ready;\n    }\n    destroy() {\n        this.offAll();\n        this.removeAllCallbacks();\n        registry.removeInstanceByID(this._flashID);\n        if (this._el.parentElement) {\n            this._el.parentElement.removeChild(this._el);\n        }\n    }\n}\n\nfunction $asyncCallback(callbackID, err, result) {\n    setTimeout(() => {\n        let callback = this._callbacks.get(callbackID);\n        if (callback) {\n            this._callbacks.remove(callbackID);\n            callback(err, result);\n        }\n    }, 0);\n}\n\nObject.defineProperty(JSFlashBridge, 'VPAID_FLASH_HANDLER', {\n    writable: false,\n    configurable: false,\n    value: VPAID_FLASH_HANDLER\n});\n\n/**\n * External interface handler\n *\n * @param {string} flashID identifier of the flash who call this\n * @param {string} typeID what type of message is, can be 'event' or 'callback'\n * @param {string} typeName if the typeID is a event the typeName will be the eventName, if is a callback the typeID is the methodName that is related this callback\n * @param {string} callbackID only applies when the typeID is 'callback', identifier of the callback to call\n * @param {object} error error object\n * @param {object} data\n */\nwindow[VPAID_FLASH_HANDLER] = (flashID, typeID, typeName, callbackID, error, data) => {\n    let instance = registry.getInstanceByID(flashID);\n    if (!instance) return;\n    if (typeName === 'handShake') {\n        instance._handShake(error, data);\n    } else {\n        if (typeID !== 'event') {\n            instance._callCallback(typeName, callbackID, error, data);\n        } else {\n            instance._trigger(typeName, data);\n        }\n    }\n};\nmodule.export = JSFlashBridge ;\n\n","'use strict';\nconst JSFlashBridgeRegistry = {};\n/*\nvar SingleValueRegistry = require('./registry').SingleValueRegistry;\nvar instances = new SingleValueRegistry();\n\n\n\nObject.defineProperty(JSFlashBridgeRegistry, 'addInstance', {\n    writable: false,\n    configurable: false,\n    value: function (id, instance) {\n        instances.add(id, instance);\n    }\n});\n\nObject.defineProperty(JSFlashBridgeRegistry, 'getInstanceByID', {\n    writable: false,\n    configurable: false,\n    value: function (id) {\n        return instances.get(id);\n    }\n});\n\nObject.defineProperty(JSFlashBridgeRegistry, 'removeInstanceByID', {\n    writable: false,\n    configurable: false,\n    value: function (id) {\n        return instances.remove(id);\n    }\n});\n*/\nmodule.exports = JSFlashBridgeRegistry;\n\n","'use strict';\n\nexport class MultipleValuesRegistry {\n    constructor () {\n        this._registries = {};\n    }\n    add (id, value) {\n        if (!this._registries[id]) {\n            this._registries[id] = [];\n        }\n        if (this._registries[id].indexOf(value) === -1) {\n            this._registries[id].push(value);\n        }\n    }\n    get (id) {\n        return this._registries[id] || [];\n    }\n    filterKeys (handler) {\n        return Object.keys(this._registries).filter(handler);\n    }\n    findByValue (value) {\n        var keys = Object.keys(this._registries).filter((key) => {\n            return this._registries[key].indexOf(value) !== -1;\n        });\n\n        return keys;\n    }\n    remove(key, value) {\n        if (!this._registries[key]) { return; }\n\n        var index = this._registries[key].indexOf(value);\n\n        if (index < 0) { return; }\n        return this._registries[key].splice(index, 1);\n    }\n    removeByKey (id) {\n        let old = this._registries[id];\n        delete this._registries[id];\n        return old;\n    }\n    removeByValue (value) {\n        let keys = this.findByValue(value);\n        return keys.map((key) => {\n            return this.remove(key, value);\n        });\n    }\n    removeAll() {\n        let old = this._registries;\n        this._registries = {};\n        return old;\n    }\n    size() {\n        return Object.keys(this._registries).length;\n    }\n}\n\nexport class SingleValueRegistry {\n    constructor () {\n        this._registries = {};\n    }\n    add (id, value) {\n        this._registries[id] = value;\n    }\n    get (id) {\n        return this._registries[id];\n    }\n    filterKeys (handler) {\n        return Object.keys(this._registries).filter(handler);\n    }\n    findByValue (value) {\n        var keys = Object.keys(this._registries).filter((key) => {\n            return this._registries[key] === value;\n        });\n\n        return keys;\n    }\n    remove (id) {\n        let old = this._registries[id];\n        delete this._registries[id];\n        return old;\n    }\n    removeByValue (value) {\n        let keys = this.findByValue(value);\n        return keys.map((key) => {\n            return this.remove(key);\n        });\n    }\n    removeAll() {\n        let old = this._registries;\n        this._registries = {};\n        return old;\n    }\n    size() {\n        return Object.keys(this._registries).length;\n    }\n}\n\n","'use strict';\n\nexport function unique(prefix) {\n    let count = -1;\n    return f => {\n        return `${prefix}_${++count}`;\n    };\n}\n\nexport function noop() {\n}\n\n\nexport function callbackTimeout(timer, onSuccess, onTimeout) {\n\n    let timeout = setTimeout(() => {\n\n        onSuccess = noop;\n        onTimeout();\n\n    }, timer);\n\n    return function () {\n        clearTimeout(timeout);\n        onSuccess.apply(this, arguments);\n    };\n}\n\n\nexport function createElementWithID(parent, id, cleanContent = false) {\n    var nEl = document.createElement('div');\n    nEl.id = id;\n    if (cleanContent) {\n        parent.innerHTML = '';\n    }\n    parent.appendChild(nEl);\n    return nEl;\n}\n\nexport function isPositiveInt(newVal, oldVal) {\n    return !isNaN(parseFloat(newVal)) && isFinite(newVal) && newVal > 0 ? newVal : oldVal;\n}\n\nlet endsWith = (function () {\n    if (String.prototype.endsWith) return String.prototype.endsWith;\n    return function endsWith (searchString, position) {\n        var subjectString = this.toString();\n        if (position === undefined || position > subjectString.length) {\n            position = subjectString.length;\n        }\n        position -= searchString.length;\n        var lastIndex = subjectString.indexOf(searchString, position);\n        return lastIndex !== -1 && lastIndex === position;\n    };\n})();\n\nexport function stringEndsWith(string, search) {\n    return endsWith.call(string, search);\n}\n\nexport function hideFlashEl(el) {\n    // can't use display none or visibility none because will block flash in some browsers\n    el.style.position = 'absolute';\n    el.style.left = '-1px';\n    el.style.top = '-1px';\n    el.style.width = '1px';\n    el.style.height = '1px';\n}\n","/*\tSWFObject v2.2 <http://code.google.com/p/swfobject/> \n\tis released under the MIT License <http://www.opensource.org/licenses/mit-license.php> \n*/\nvar swfobject=function(){var D=\"undefined\",r=\"object\",S=\"Shockwave Flash\",W=\"ShockwaveFlash.ShockwaveFlash\",q=\"application/x-shockwave-flash\",R=\"SWFObjectExprInst\",x=\"onreadystatechange\",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/,\"$1\")):false,X=!+\"\\v1\",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\\s+(\\S+\\s+\\S+$)/,\"$1\");ag[0]=parseInt(ab.replace(/^(.*)\\..*$/,\"$1\"),10);ag[1]=parseInt(ab.replace(/^.*\\.(.*)\\s.*$/,\"$1\"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,\"$1\"),10):0}}else{if(typeof O[(['Active'].concat('Object').join('X'))]!=D){try{var ad=new window[(['Active'].concat('Object').join('X'))](W);if(ad){ab=ad.GetVariable(\"$version\");if(ab){X=true;ab=ab.split(\" \")[1].split(\",\");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState==\"complete\")||(typeof j.readyState==D&&(j.getElementsByTagName(\"body\")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener(\"DOMContentLoaded\",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState==\"complete\"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll(\"left\")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName(\"body\")[0].appendChild(C(\"span\"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener(\"load\",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener(\"load\",Y,false)}else{if(typeof O.attachEvent!=D){i(O,\"onload\",Y)}else{if(typeof O.onload==\"function\"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName(\"body\")[0];var aa=C(r);aa.setAttribute(\"type\",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable(\"$version\");if(ab){ab=ab.split(\" \")[1].split(\",\");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute(\"width\")||\"0\";ai.height=ae.getAttribute(\"height\")||\"0\";if(ae.getAttribute(\"class\")){ai.styleclass=ae.getAttribute(\"class\")}if(ae.getAttribute(\"align\")){ai.align=ae.getAttribute(\"align\")}var ah={};var X=ae.getElementsByTagName(\"param\");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute(\"name\").toLowerCase()!=\"movie\"){ah[X[ad].getAttribute(\"name\")]=X[ad].getAttribute(\"value\")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName==\"OBJECT\"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F(\"6.0.65\")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName==\"OBJECT\"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width=\"310\"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height=\"137\"}j.title=j.title.slice(0,47)+\" - Flash Player Installation\";var ad=M.ie&&M.win?(['Active'].concat('').join('X')):\"PlugIn\",ac=\"MMredirectURL=\"+O.location.toString().replace(/&/g,\"%26\")+\"&MMplayerType=\"+ad+\"&MMdoctitle=\"+j.title;if(typeof ab.flashvars!=D){ab.flashvars+=\"&\"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C(\"div\");X+=\"SWFObjectNew\";Y.setAttribute(\"id\",X);ae.parentNode.insertBefore(Y,ae);ae.style.display=\"none\";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C(\"div\");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display=\"none\";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C(\"div\");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName==\"PARAM\")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah=\"\";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()==\"data\"){ag.movie=ai[ae]}else{if(ae.toLowerCase()==\"styleclass\"){ah+=' class=\"'+ai[ae]+'\"'}else{if(ae.toLowerCase()!=\"classid\"){ah+=\" \"+ae+'=\"'+ai[ae]+'\"'}}}}}var af=\"\";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name=\"'+ad+'\" value=\"'+ag[ad]+'\" />'}}aa.outerHTML='<object classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"'+ah+\">\"+af+\"</object>\";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute(\"type\",q);for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()==\"styleclass\"){Z.setAttribute(\"class\",ai[ac])}else{if(ac.toLowerCase()!=\"classid\"){Z.setAttribute(ac,ai[ac])}}}}for(var ab in ag){if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!=\"movie\"){e(Z,ab,ag[ab])}}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C(\"param\");aa.setAttribute(\"name\",X);aa.setAttribute(\"value\",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName==\"OBJECT\"){if(M.ie&&M.win){X.style.display=\"none\";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]==\"function\"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(\".\");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName(\"head\")[0];if(!aa){return}var X=(ad&&typeof ad==\"string\")?ad:\"screen\";if(ab){n=null;G=null}if(!n||G!=X){var Z=C(\"style\");Z.setAttribute(\"type\",\"text/css\");Z.setAttribute(\"media\",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+\" {\"+Y+\"}\"))}}}function w(Z,X){if(!m){return}var Y=X?\"visible\":\"hidden\";if(J&&c(Z)){c(Z).style.visibility=Y}else{v(\"#\"+Z,\"visibility:\"+Y)}}function L(Y){var Z=/[\\\\\\\"<>\\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent(\"onunload\",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);K(function(){ae+=\"\";ag+=\"\";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+=\"&\"+ai+\"=\"+Z[ai]}else{am.flashvars=ai+\"=\"+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\\?/.test(Z)){Z=Z.split(\"?\")[1]}if(aa==null){return L(Z)}var Y=Z.split(\"&\");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf(\"=\"))==aa){return L(Y[X].substring((Y[X].indexOf(\"=\")+1)))}}}return\"\"},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display=\"block\"}}if(E){E(B)}}a=false}}}}();module.exports=swfobject;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}