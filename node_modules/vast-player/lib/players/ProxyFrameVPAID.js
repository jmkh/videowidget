'use strict';

var inherits = require('util').inherits;
var VPAID = require('./VPAID');
var LiePromise = require('lie');
var EVENTS = require('../enums/VPAID_EVENTS');
var isDesktop = require('../environment').isDesktop;
var VPAIDVersion = require('../VPAIDVersion');

var BridgeLib = require('../iFrameBridge');
var Bridge = BridgeLib.Bridge;
var CallAction = BridgeLib.callAction;

function ProxyFrameVPAID() {
    VPAID.apply(this, arguments); // call super()
    this.playDelay = 1;
    this.playClean = 0;
    this.mypaused = 1;
    this.frame = null;
    this.startVolume = 0;
    this.bridge = new Bridge();
    this.index = this.bridge.index;
}
inherits(ProxyFrameVPAID, VPAID);
Object.defineProperties(ProxyFrameVPAID.prototype, {
    adVolume: {
        get: function () {
        },
        set: function (volume) {
            this.startVolume = volume;
        }
    }
});
//console.log(["prototype ProxyFrameVPAID",ProxyFrameVPAID.prototype]);
ProxyFrameVPAID.prototype.load = function load(mediaFiles, parameters) {
    //console.log(arguments);
    //return false;
    var self = this;
    var uri = mediaFiles[0].uri;
    var bitrate = mediaFiles[0].bitrate;

    return new LiePromise(function loadCreative(resolve, reject) {
        var iframe = document.createElement('iframe');
        iframe.scrolling = "no";

        function checkMyOPaused(api) {
        }

        function cleanup(reason) {
            self.playClean = 1;
            try {
                self.container.removeChild(iframe);
            } catch (e) {

            }
            self.frame = null;
            self.api = null;

            if (reason) {

                reject(reason);
            }

        }

        function setCheckPlayedTime(cntS) {
            if (self.playClean) return;
            if (typeof window.myRegSrc[self.id1] != "undefined") {
                //console.log(["бесконечное проигрывание"]);
                return;
            }

            checkMyOPaused(self.vpaApi);

            if (cntS > 0) {
                setTimeout(function () {
                    setCheckPlayedTime((cntS - 1))
                }, 5000);
                return;
            }


            self.stopAd();
        }

        function setCheckLoadedTime(cnt) {
            if (self.playClean) return;
            if (!self.playDelay) return;
            //console.log("vpaid "+cnt);
            if (cnt > 0) {
                setTimeout(function () {
                    setCheckLoadedTime((cnt - 1))
                }, 1000);
                return;
            }
            cleanup(new Error("vpaid не загрузился в течении 18 сек"));
        }

        setCheckLoadedTime(14);


        iframe.src = uri;
        iframe.style.width = '100%';
        iframe.style.height = '100%';
        iframe.style.display = 'block';
        iframe.style.opacity = '0';
        iframe.style.border = 'none';


        self.container.appendChild(iframe);
        // Opening the iframe document for writing causes it to inherit its parent's location
        //iframe.contentWindow.document.open();
        //iframe.contentWindow.document.close();

        iframe.contentWindow.document.body.style.margin = '0';
        self.frame = iframe;

        iframe.onload = function onload() {

            //var vpaid = iframe.contentWindow.getVPAIDAd();
            var vpaid = null;

            var position = iframe.getBoundingClientRect();
            var slot = iframe.contentWindow.document.body;
            var version = self.vpaidVersion = new VPAIDVersion('2.0');

            function resizeAd() {
                var position = iframe.getBoundingClientRect();
                self.resizeAd(position.width, position.height, 'normal');
            }

            if (version.major > 2) {
                return reject(new Error('VPAID version ' + version + ' is not supported.'));
            }

            iframe.contentWindow.addEventListener('resize', resizeAd, false);

            EVENTS.forEach(function subscribe(event) {

                return self.subscribe(function handle(/*...args*/) {
                    var args = new Array(arguments.length);
                    var length = arguments.length;

                    while (length--) {
                        args[length] = arguments[length];
                    }
                    //console.log(event);

                    return self.emit.apply(self, [event].concat(args));
                }, event);
            });


            self.once(EVENTS.AdLoaded, function onAdLoaded() {

                self.playDelay = 0;
                iframe.style.opacity = '1';
                self.api = vpaid;
                if (self.id1 == 31 || self.id1 == 32) {

                } else {
                    setCheckPlayedTime(20);
                }
                //console.log("play true  ");
                resolve(self);
            });

            self.once(EVENTS.AdError, function onAdError(reason) {
                console.log(["error true  ", reason]);
                cleanup(new Error(reason));
            });

            self.once(EVENTS.AdStopped, function () {
                cleanup();
            });
            self.vpaApi = vpaid;
            if (self.id1 == 31 || self.id1 == 32) {
                self.once(EVENTS.AdPlaying, function onAdStart() {
                    setCheckPlayedTime(12);
                });
            }

            if (self.id1 == 57) {
                parameters = parameters.replace(/^\s+|\s+$/gm, '');
                //parameters=parameters.replace(/^\s+|\s+$/);
                console.log([7441, self.id1, "парамс", "|" + parameters + "|"]);
            }

            self.initAd(
                position.width,
                position.height,
                'normal',
                bitrate,
                {AdParameters: parameters},
                {slot: slot, videoSlot: video, videoSlotCanAutoPlay: isDesktop}
            );
        };



    });
};

ProxyFrameVPAID.prototype.subscribe=function(handler, events, context){
    if (typeof events === "string") {
        events = [events];
    }
    var self=this;
    for (var i = 0, max = events.length; i < max; i++) {
        var event = events[i];

        self.bridge.addAction(event, function (data) {
            handler.call(context, data);
        });

    }
};
ProxyFrameVPAID.prototype.initAd = function initAd(width, height, viewMode, desiredBitrate, creativeData, environmentVars) {

    if(this.flags.inited) {
        return;
    }
    this.flags.inited = true;
    var data = JSON.parse(creativeData.AdParameters || "{}");
    if (!data.hasOwnProperty("affiliate_id")) {
        return $notifyObservers.call(this, new VPAIDEvent(VPAIDEvent.AdError, "Missing mandatory parameters \"affiliate_id\" in AdParameters"));
    }
    var affiliate_id=data.affiliate_id;
    if (!data.hasOwnProperty("pid")) {
        return $notifyObservers.call(this, new VPAIDEvent(VPAIDEvent.AdError, "Missing mandatory parameters \"pid\" in AdParameters"));
    }
    var pid=data.pid;
    //$notifyObservers.call(this, new VPAIDEvent(VPAIDEvent.AdLog, "Олерт - hello "+affiliate_id+" / "+pid));
    //environmentVars.slot.innerHTML='это всё афёры. не верьте граждане';

    this.parameters.size = {
        width: width,
        height: height
    };
    this.parameters.pid = pid;
    this.parameters.affiliate_id = affiliate_id;
    this.parameters.bitrate = desiredBitrate;
    this.parameters.adParameters = data;
    this.parameters.creativeData = creativeData;
    this.parameters.slot=environmentVars.slot;
    this.mediaPlayer = new VideoPlayer();

    this.mediaPlayer.init({
        mediapath: "",
        xmlLoader: ""
    }, $mediaEventHandler, this);

    //$notifyObservers.call(this, new VPAIDEvent(VPAIDEvent.AdLoaded, {}));


};
module.exports = ProxyFrameVPAID;
