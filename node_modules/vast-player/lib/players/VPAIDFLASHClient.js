'use strict';
 	    
var FLASH_TEST_EL = 'vpaid_video_flash_tester_el';
var swfobject = require('./myswf');
var noop = require('./utils').noop;
var isPositiveInt = require('./utils').isPositiveInt;
var uniqueVPAID = require('./utils').unique('vpaid');
var callbackTimeout = require('./utils').callbackTimeout;
var createElementWithID = require('./utils').createElementWithID;
var JSFlashBridge = require('./jsFlashBridge').JSFlashBridge;
var VPAIDAdUnit = require('./VPAIDAdUnit').VPAIDAdUnit;
//var createFlashTester = require('./flashTester').createFlashTester;
var ERROR = 'error';
var FLASH_VERSION = '10.1.0';
var flashTester=true;
 	   
function VPAIDFLASHClient(elementP, callback, swfConfig, params , vpaidOptions) {
 	    var me = this;
        //this._vpaidParentEl = vpaidParentEl;
		this._flashID = uniqueVPAID();
		this._destroyed = false;
		this._playerLoading = 0;
	    this.vpaidParentEl=null;
        callback = callback || noop;
	   
		swfConfig.width = isPositiveInt(swfConfig.width, 500);
        swfConfig.height = isPositiveInt(swfConfig.height, 350);

	    if(!VPAIDFLASHClient.isSupported()) {
	    
         return onError('user don\'t support flash or doesn\'t have the minimum required version of flash ' + FLASH_VERSION);
        }
		
        params.movie = swfConfig.data;
		this.vpaidParentEl=document.createElement("DIV"); 
		document.body.appendChild(this.vpaidParentEl);
        this.vpaidParentEl.style.display='block!important';
		var parentEl = createElementWithID(this.vpaidParentEl, FLASH_TEST_EL); // some browsers create global variables
		var self = this;
	    //params.FlashVars = 'flashid='+FLASH_TEST_EL+'&handler='+JSFlashBridge.VPAID_FLASH_HANDLER+'&debug='+vpaidOptions.debug+'salign='+params.salign; 
		params.FlashVars = 'flashid='+FLASH_TEST_EL+'&handler='+JSFlashBridge.VPAID_FLASH_HANDLER+'&debug=false'; 
		params.allowScriptAccess = 'always';
	    this.el = swfobject.createSWF(swfConfig, params, FLASH_TEST_EL);
		if(!this.el){
		 return onError('user don\'t support flash or doesn\'t have the minimum required version of flash ' + FLASH_VERSION);
		}
					this._flash = new JSFlashBridge(this.el, swfConfig.data, FLASH_TEST_EL, swfConfig.width, swfConfig.width, function(){
					self._playerLoading = 1;
			        callback();
		            });
					
					
					
	    function setCheckLoadedTime(cnt){
		if(self._playerLoading) return;
		if(self._destroyed) return;
		console.log(["таймер load",cnt]);
		if(cnt>0){
		setTimeout(function(){
		setCheckLoadedTime((cnt-1))
		}, 1000);
		return;
		}
         self.destroy();
	     
		 return onError("flash 10 сек");
		 //reject("flash 10 сек");
		cleanup(new Error("vpaid не загрузился в течении 18 сек"));  
		}

		
		setCheckLoadedTime(10);			
		




    if (!VPAIDFLASHClient.isSupported()) {
	    
         return onError('user don\'t support flash or doesn\'t have the minimum required version of flash ' + FLASH_VERSION);
    }
		




        function onError(error) {
            setTimeout(function(){
			    callback(new Error(error));
            }, 0);
            return me;
        }		
};
VPAIDFLASHClient.prototype._destroyAdUnit=function() {
         delete this._loadLater;

        if (this._adUnitLoad) {
            this._adUnitLoad = null;
            this._flash.removeCallback(this._adUnitLoad);
        }

        if (this._adUnit) {
            this._adUnit._destroy();
            this._adUnit = null;
        }
    }
VPAIDFLASHClient.prototype.destroy =function() {
if(this.vpaidParentEl){
document.body.removeChild(this.vpaidParentEl);
this.vpaidParentEl=null;
}
        this._destroyAdUnit();

        if (this._flash) {
            this._flash.destroy();
            this._flash = null;
        }
        this.el = null;
        this._destroyed = true;
    }
VPAIDFLASHClient.prototype.loadAdUnit= function(adURL, callback) {

        if (this._flash.isReady()) {
		var self=this;
            this._adUnitLoad = function(err, message){
               if (!err) {
                   self._adUnit = new VPAIDAdUnit(self._flash);
                }
                self._adUnitLoad = null;
                callback(err, self._adUnit);
            };

         this._flash.callFlashMethod('loadAdUnit', [adURL], this._adUnitLoad);
        }else{

		 this._loadLater = {url: adURL, callback:callback};
		}

};


	function setStaticProperty(propertyName, value, writable) {
	    writable = writable || false;
        Object.defineProperty(VPAIDFLASHClient, propertyName, {
            writable: writable,
            configurable: false,
            value: value
        });
    }


	
	
setStaticProperty('isSupported', function(){
  
       //return true;
	   return swfobject.hasFlashPlayerVersion(FLASH_VERSION);
    }, true);
function hideFlashEl (el) {
    // can't use display none or visibility none because will block flash in some browsers
    el.style.position = 'absolute';
    el.style.left = '-1px';
    el.style.top = '-1px';
    el.style.width = '1px';
    el.style.height = '1px';
}

VPAIDFLASHClient.swfobject = swfobject;
module.exports =  VPAIDFLASHClient;
	 
/*






let flashTester = {isSupported: ()=> true}; // if the runFlashTest is not run the flashTester will always return true

class VPAIDFLASHClient {
    constructor (vpaidParentEl, callback, swfConfig = {data: 'VPAIDFlash.swf', width: 800, height: 400}, params = { wmode: 'transparent', salign: 'tl', align: 'left', allowScriptAccess: 'always', scale: 'noScale', allowFullScreen: 'true', quality: 'high'}, vpaidOptions = { debug: false, timeout: 10000 }) {

        var me = this;

        this._vpaidParentEl = vpaidParentEl;
        this._flashID = uniqueVPAID();
        this._destroyed = false;
        callback = callback || noop;

        swfConfig.width = isPositiveInt(swfConfig.width, 800);
        swfConfig.height = isPositiveInt(swfConfig.height, 400);

        createElementWithID(vpaidParentEl, this._flashID, true);

        params.movie = swfConfig.data;
        params.FlashVars = `flashid=${this._flashID}&handler=${JSFlashBridge.VPAID_FLASH_HANDLER}&debug=${vpaidOptions.debug}&salign=${params.salign}`;

        if (!VPAIDFLASHClient.isSupported()) {
            return onError('user don\'t support flash or doesn\'t have the minimum required version of flash ' + FLASH_VERSION);
        }

        this.el = swfobject.createSWF(swfConfig, params, this._flashID);

        if (!this.el) {
            return onError( 'swfobject failed to create object in element' );
        }

        var handler = callbackTimeout(vpaidOptions.timeout,
            (err, data) => {
                $loadPendedAdUnit.call(this);
                callback(err, data);
            }, () => {
                callback('vpaid flash load timeout ' + vpaidOptions.timeout);
            }
        );

        this._flash = new JSFlashBridge(this.el, swfConfig.data, this._flashID, swfConfig.width, swfConfig.height, handler);

        function onError(error) {
            setTimeout(() => {
                callback(new Error(error));
            }, 0);
            return me;
        }

    }

    destroy () {
        this._destroyAdUnit();

        if (this._flash) {
            this._flash.destroy();
            this._flash = null;
        }
        this.el = null;
        this._destroyed = true;
    }

    isDestroyed () {
        return this._destroyed;
    }

    _destroyAdUnit() {
        delete this._loadLater;

        if (this._adUnitLoad) {
            this._adUnitLoad = null;
            this._flash.removeCallback(this._adUnitLoad);
        }

        if (this._adUnit) {
            this._adUnit._destroy();
            this._adUnit = null;
        }
    }

    loadAdUnit(adURL, callback) {
        $throwIfDestroyed.call(this);

        if (this._adUnit) {
            this._destroyAdUnit();
        }

        if (this._flash.isReady()) {
            this._adUnitLoad = (err, message) => {
                if (!err) {
                    this._adUnit = new VPAIDAdUnit(this._flash);
                }
                this._adUnitLoad = null;
                callback(err, this._adUnit);
            };

            this._flash.callFlashMethod('loadAdUnit', [adURL], this._adUnitLoad);
        }else {
            this._loadLater = {url: adURL, callback};
        }
    }

    unloadAdUnit(callback = undefined) {
        $throwIfDestroyed.call(this);

        this._destroyAdUnit();
        this._flash.callFlashMethod('unloadAdUnit', [], callback);
    }
    getFlashID() {
        $throwIfDestroyed.call(this);
        return this._flash.getFlashID();
    }
    getFlashURL() {
        $throwIfDestroyed.call(this);
        return this._flash.getFlashURL();
    }
	
}

setStaticProperty('isSupported', () => {
    return swfobject.hasFlashPlayerVersion(FLASH_VERSION) && flashTester.isSupported();
}, true);

setStaticProperty('runFlashTest', (swfConfig) => {
    flashTester = createFlashTester(document.body, swfConfig);
});

function $throwIfDestroyed() {
    if(this._destroyed) {
        throw new Error('VPAIDFlashToJS is destroyed!');
    }
}

function $loadPendedAdUnit() {
    if (this._loadLater) {
        this.loadAdUnit(this._loadLater.url, this._loadLater.callback);
        delete this._loadLater;
    }
}

function setStaticProperty(propertyName, value, writable = false) {
    Object.defineProperty(VPAIDFLASHClient, propertyName, {
        writable: writable,
        configurable: false,
        value: value
    });
}


*/


