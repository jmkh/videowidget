'use strict';

var EventEmitter = require('events').EventEmitter;
var inherits = require('util').inherits;
var VAST = require('vastacular').VAST;
var JavaScriptVPAIDPlayer = require('./players/JavaScriptVPAID');
var FlashVPAIDPlayer = require('./players/FlashVPAID');
var HTMLVideoPlayer = require('./players/HTMLVideo');
var ANDROIDVideoPlayer = require('./players/ANDROIDVideo');
var IOSVideoPlayer = require('./players/IOSVideo');
var MIME = require('./enums/MIME');
var EVENTS = require('./enums/VPAID_EVENTS');
var EventProxy = require('./EventProxy');
var LiePromise = require('lie');
var PixelReporter = require('./PixelReporter');
function iOS() {

  var iDevices = [
    'iPad Simulator',
    'iPhone Simulator',
    'iPod Simulator',
    'iPad',
    'iPhone',
    'iPod'
  ];
//return true;
  if (!!navigator.platform) {
    while (iDevices.length) {
      if (navigator.platform === iDevices.pop()){ return true; }
    }
  }

  //return isAndr();
  return false;
}
function checkIfFlashEnabled() {
    var isFlashEnabled = false;
    if (typeof(navigator.plugins) != "undefined" && typeof(navigator.plugins["Shockwave Flash"]) == "object") isFlashEnabled = true;
    else if (typeof  window.ActiveXObject != "undefined") {
        // Проверка для IE
        try {
            if (new ActiveXObject("ShockwaveFlash.ShockwaveFlash")) isFlashEnabled = true;
        } catch (e) {
        }
    }
     return isFlashEnabled;
}
function defaults(/*...objects*/) {
    var result = {};
    var length = arguments.length;
    var index, object;
    var prop, value;

    for (index = 0; index < length; index++) {
        object = arguments[index] || {};

        for (prop in object) {
            value = object[prop];

            if (result[prop] === undefined) {
                result[prop] = value;
            }

            if (typeof value === 'object') {
                result[prop] = defaults(result[prop], value);
            }
        }
    }

    return result;
}

function identity(value) {
    return value;
}

function getNotReadyError() {
    return new Error('VASTPlayer not ready.');
}

function proxy(method) {
    return function callMethod() {
        var self = this;
        var player = this.__private__.player;

        if (!this.ready) {
            return LiePromise.reject(getNotReadyError());
        }

        return player[method].apply(player, arguments).then(function() {
            return self;
        });
    };
}

function proxyProp(property) {
    return {
        get: function get() {
            if (!this.ready) { throw getNotReadyError(); }

            return this.__private__.player[property];
        },

        set: function set(value) {
            if (!this.ready) { throw getNotReadyError(); }

            return (this.__private__.player[property] = value);
        }
    };
}

function VASTPlayer(container, config) {
    var self = this;

    EventEmitter.call(this); // call super()

    this.__private__ = {
        container: container,
        config: defaults(config, {
            vast: {
			    withCredentials : true,
                resolveWrappers: true,
                maxRedirects: 7
            },
            tracking: {
                mapper: identity
            }
        }),

        vast: null,
        ready: false,
        player: null,
		pType : 0
    };
    
    this.on(EVENTS.AdClickThru, function onAdClickThru(url, id, playerHandles) {
	  
        if(this.chekcClicked()) return true;
		
	    var clickThrough = url || self.vast.get('ads[0].creatives[0].videoClicks.clickThrough');
        if(playerHandles && clickThrough){
            window.open(clickThrough);
        }
    });
}
inherits(VASTPlayer, EventEmitter);
Object.defineProperties(VASTPlayer.prototype, {
    container: {
        get: function getContainer() {
            return this.__private__.container;
        }
    },

    config: {
        get: function getConfig() {
            return this.__private__.config;
        }
    },

    vast: {
        get: function getVast() {
            return this.__private__.vast;
        }
    },

    ready: {
        get: function getReady() {
            return this.__private__.ready;
        }
    },

    adRemainingTime: proxyProp('adRemainingTime'),
    adDuration: proxyProp('adDuration'),
    adVolume: proxyProp('adVolume')
});
VASTPlayer.prototype.chekcClicked = function chekcClicked() {

if(this.pType == 4){
    if(!this.__private__.player.privateStarted) {
	this.__private__.player.privateStarted=1;
	return 1;
	
	}else{
	}
}

return 0;
};
VASTPlayer.prototype.load = function load(uri) {
    var self = this;
    var config = this.config.vast;

    return VAST.fetch(uri, config).then(function loadPlayer(vast) {

	    var myIos=iOS();
		var isAndroid = /(android)/i.test(navigator.userAgent);
		
        var config = (function() {
            var jsVPAIDFiles = vast.filter('ads[0].creatives[0].mediaFiles', function(mediaFile) {
                return (
                    mediaFile.type === MIME.JAVASCRIPT ||
                    mediaFile.type === 'application/x-javascript'
                ) && mediaFile.apiFramework === 'VPAID';
            });
            var swfVPAIDFiles = vast.filter('ads[0].creatives[0].mediaFiles', function(mediaFile) {
                return mediaFile.type === MIME.FLASH && mediaFile.apiFramework === 'VPAID' && checkIfFlashEnabled();
            });
            var files = vast.filter('ads[0].creatives[0].mediaFiles', function() { return true; });

            if (jsVPAIDFiles.length > 0) {
			self.pType=1;
                return {
                    player: new JavaScriptVPAIDPlayer(self.container),
                    mediaFiles: jsVPAIDFiles
                };
            } else if (swfVPAIDFiles.length > 0) {
			self.pType=2;
                return {
                    player: new FlashVPAIDPlayer(self.container, VASTPlayer.vpaidSWFLocation),
                    mediaFiles: swfVPAIDFiles
                };
            }
			//myIos=true;
            self.pType=3;
			if(myIos){
			 return {
			    player: new IOSVideoPlayer(self.container),
                mediaFiles: files
                };
			}else{
			if(isAndroid){ 
			self.pType=4;
			return {
			    player: new ANDROIDVideoPlayer(self.container),
                mediaFiles: files
                };		
			reject("it is not Adroid player");
			}
			 return {
			    player: new HTMLVideoPlayer(self.container),
                mediaFiles: files
                };				
			}
        }());
		
		
		
        var parameters = vast.get('ads[0].creatives[0].parameters');
        var pixels = [].concat(
            vast.map('ads[0].impressions', function(impression) {
                return { event: 'impression', uri: impression.uri };
            }),
            vast.map('ads[0].errors', function(uri) {
                return { event: 'error', uri: uri };
            }),
            vast.get('ads[0].creatives[0].trackingEvents'),
            vast.map('ads[0].creatives[0].videoClicks.clickTrackings', function(uri) {
                return { event: 'clickThrough', uri: uri };
            })
        );
   
        var player = config.player;
        var mediaFiles = config.mediaFiles;
        var proxy = new EventProxy(EVENTS);
		 //console.log([700,vast]);
		 //console.log([7001,mediaFiles]);
       var reporter = new PixelReporter(pixels, self.config.tracking.mapper);
	   reporter.PlayToBridge = function(type,arr){
	   return 1;
       };
       if(typeof self.config.bidgeFn=='function'){
	   reporter.PlayToBridge = function(type,arr){
	   self.config.bidgeFn(self.id_local_source,type,arr);
	   return 1;
        };
		}
        proxy.from(player).to(self);

        self.__private__.vast = vast;
        self.__private__.player = player;
       
        return player.load(mediaFiles, parameters).then(function setupPixels() {
            reporter.track(player);
        });
    }).then(function setReady() {
	    
        self.__private__.ready = true;
        self.emit('ready');

        return self;
    }).catch(function emitError(reason) {
	    self.emit('error', reason);

        throw reason;
    });
};

VASTPlayer.prototype.startAd = proxy('startAd');

VASTPlayer.prototype.stopAd = proxy('stopAd');

VASTPlayer.prototype.pauseAd = proxy('pauseAd');

VASTPlayer.prototype.resumeAd = proxy('resumeAd');

VASTPlayer.vpaidSWFLocation = 'https://cdn.jsdelivr.net' +
    '/vast-player/__VERSION__/vast-player--vpaid.swf';

module.exports = VASTPlayer;
